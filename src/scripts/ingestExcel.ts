import fs from "fs";
import path from "path";
import xlsx from "xlsx";
import dotenv from "dotenv";
import { OpenAIEmbeddings } from "@langchain/openai";
import { PineconeStore } from "@langchain/community/vectorstores/pinecone";
import { pineconeIndex } from "../services/pinecone";
import { openai } from "../services/openai";

dotenv.config();

// H√†m sinh topic t·ª± ƒë·ªông t·ª´ n·ªôi dung c√¢u h·ªèi + c√¢u tr·∫£ l·ªùi
async function getTopicFromText(text: string): Promise<string> {
  const res = await openai.chat.completions.create({
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content:
          "B·∫°n l√† tr·ª£ l√Ω ph√¢n lo·∫°i ch·ªß ƒë·ªÅ. H√£y ph√¢n lo·∫°i ƒëo·∫°n vƒÉn d∆∞·ªõi th√†nh 1 t·ª´ ho·∫∑c c·ª•m t·ª´ ng·∫Øn th·ªÉ hi·ªán ƒë√∫ng n·ªôi dung ch√≠nh.",
      },
      {
        role: "user",
        content: `Ph√¢n lo·∫°i topic c·ªßa ƒëo·∫°n sau:\n\n"${text}"`,
      },
    ],
    temperature: 0.2,
  });

  return res.choices[0].message.content?.trim() || "Ch∆∞a x√°c ƒë·ªãnh";
}

// H√†m ch√≠nh ƒë·ªÉ ingest t·ª´ file Excel v√†o Pinecone
async function ingestExcel(filePath: string, namespace: string) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];
  const data = xlsx.utils.sheet_to_json(sheet, { header: 1 });

  const embeddings = new OpenAIEmbeddings();

  const texts: string[] = [];
  const metadatas: Record<string, string>[] = [];

  for (let i = 1; i < data.length; i++) {
    const row = data[i] as string[]; // Fix l·ªói: khai b√°o ki·ªÉu
    const question = row[0]?.toString().trim();
    const answer = row[1]?.toString().trim();
    let topic = row[2]?.toString().trim();

    if (!question || !answer) continue;

    const combinedText = `Q: ${question}\nA: ${answer}`;
    texts.push(combinedText);

    if (!topic) {
      topic = await getTopicFromText(combinedText);
      console.log(`üîç Sinh topic cho c√¢u h·ªèi: "${question}" ‚Üí ${topic}`);
    }

    metadatas.push({ topic });
  }

  console.log("üìå ƒêang ƒë·∫©y v√†o Pinecone...");
  await PineconeStore.fromTexts(texts, metadatas, embeddings, {
    pineconeIndex,
    namespace,
  });

  console.log("‚úÖ ƒê√£ ingest d·ªØ li·ªáu t·ª´ Excel th√†nh c√¥ng!");
}

// G·ªçi h√†m
const filePath = path.join(__dirname, "../../data/faq.xlsx"); // B·∫°n ƒë·ªïi l·∫°i t√™n file n·∫øu kh√°c
const namespace = "faq"; // C√≥ th·ªÉ ƒë·ªïi th√†nh "duan" ho·∫∑c t√™n kh√°c

ingestExcel(filePath, namespace).catch((err) => {
  console.error("‚ùå L·ªói trong qu√° tr√¨nh ingest:", err);
});